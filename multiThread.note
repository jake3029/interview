1、什么是多线程？
    实现程序中多个线程并发执行的技术，使程序在同一时间使用cpu多个计算单元
2、为什么要使用多线程？
    单线程不能充分利用多核cpu
3、如何实现多线程？
    继承Thread类
    实现Runnable接口
    实现callable接口
    直接利用线程池创建线程
4、线程间如何通讯？
    wait
    notify
    nofityall
    join
    Interrupted
5、锁
    什么是乐观锁和悲观锁
        乐观锁：乐观锁认为竞争不总是会发生，因此它不需要持有锁，将CAS算法这两个动作作为一个原子操作尝试去修改内存中的变量，如果失败则表示发生冲突，那么就应该有相应的重试逻辑。
        悲观锁：悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，不管三七二十一，直接上了锁就操作资源了。
    锁有几种状态？
        无锁
        偏向锁
        轻量级锁
        重量级锁
    互斥锁
        同一时刻只有一个线程执行
        synchronize是一个互斥锁
    死锁
        产生死锁的条件
            互斥条件：一个资源每次只能被一个进程使用。
            请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。
            不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。
            循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。
         如何预防死锁
            1、破坏占用且等待条件
            2、破坏不可抢占
            3、破坏循环等待条件
6、并发框架
    线程池Executor
      什么是两级调度模型
        Executor负责控制上层的调度
        下层由操作系统内核控制
      组成
        任务
          实现Runnable接口后者callable接口的类
        任务执行器
        Future 异步计算的结果
          Executor可以把一个Runnable封装成一个callable
      工作队列
        LinkedBlockingQueue
        SynchronousQueue
        ArrayBlockingQueue
        PriorityBlockingQueue
    并发工具
      CountDownLatch计数器闭锁
        线程同步工具
      Semaphore信号量
        用于：模拟出稳定的并发量
        一个能阻塞线程且能控制统一时间请求的并发量的工具
      CyclicBarrier线程互相等待
        可以让一组线程相互等待，当每个线程都准备好之后，所有线程才继续执行的工具类